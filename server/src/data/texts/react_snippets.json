[
  "import React from 'react'",
  "import ReactDOM from 'react-dom'",
  "import React, {Component} from 'react'",
  "<Video fullscreen={true} autoplay={false} />",
  "render () { this.props.fullscreen const { fullscreen, autoplay } = this.props ··· }",
  "constructor(props) { super(props); this.state = { username: undefined }; }",
  "this.setState({ username: 'quickcoder' })",
  "render () { this.state.username const { username } = this.state ··· }",
  "Hello.defaultProps = { color: 'blue' }",
  "class Hello extends Component { state = { visible: true } }",
  "class Hello extends Component { constructor (props) { super(props) this.state = { visible: true } } }",
  "function MyComponent ({ name }) { return <div className='message-box'> Hello {name} </div> }",
  "import React, {PureComponent} from 'react' class MessageBox extends PureComponent { ··· }",
  "this.forceUpdate()",
  "this.state",
  "this.props",
  "this.setState({ ... })",
  "this.setState(state => { ... })",
  "constructor (props)",
  "componentWillMount()",
  "render()",
  "componentDidMount()",
  "componentWillUnmount()",
  "componentDidCatch()",
  "componentDidUpdate (prevProps, prevState, snapshot)",
  "shouldComponentUpdate (newProps, newState)",
  "render()",
  "componentDidUpdate (prevProps, prevState)",
  "const [count, setCount] = useState(0);",
  "import React, { useState, useEffect } from 'react';",
  "const [fruit, setFruit] = useState('banana');",
  "useEffect(() => { document.title = `You clicked ${count} times`; }, [count]);",
  "useReducer(reducer, initialArg, init)",
  "useCallback(() => { ... })",
  "useMemo(() => { ... })",
  "useRef(initialValue)",
  "useImperativeHandle(ref, () => { ... })",
  "useLayoutEffect",
  "useDebugValue(value)",
  "<input type=\"text\" value={this.state.value} onChange={event => this.onChange(event)}/>",
  "React.createClass({ ... })",
  "React.isValidElement(c)",
  "ReactDOM.render(<Component />, domnode, [callback])",
  "ReactDOM.unmountComponentAtNode(domnode)",
  "return <div style={{ margin: 0, padding: 0 }}></div>",
  "<div dangerouslySetInnerHTML={{__html: someInnerHtml}} />",
  "{fruits.map(fruit => <li>{fruit}</li>)}",
  "<Fragment> {showPopup && <Popup />} ... </Fragment>",
  "render () { return React.createPortal( this.props.children, document.getElementById('menu')) }",
  "const el = document.getElementById('app'); ReactDOM.hydrate(<App />, el)",
  "componentDidCatch (error, info) { this.setState({ error }) }",
  "import PropTypes from 'prop-types'",
  "MyComponent.propTypes = { email: PropTypes.string, seats: PropTypes.number, callback: PropTypes.func, isClosed: PropTypes.bool, any: PropTypes.any }",
  "MyCo.propTypes = { name:  PropTypes.string.isRequired }",
  "MyCo.propTypes = { direction: PropTypes.oneOf([ 'left', 'right' ]) }",
  ""
]
